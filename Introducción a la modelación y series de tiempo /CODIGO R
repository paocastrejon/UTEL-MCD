#****************************************************************************************
# Maestría: Ciencia de Datos.
# Materia: Introducción a la modelación y series de tiempo
# Alumnos: Diego Sánchez Luna, Edgardo hernandez arredondo, Francisco Antonio Córdova Esteva, 
# Nelson Javier Ramírez Sánchez, Pablo Ernesto Guzman Horta, Paola Castrejon Mata, Sergio Martinez Gutierrez y Sonia 
# Moran Jarquín. 
# Tema: Pronóstico con modelos ARIMA. 
# Objetivo: Descomposición estacional de una serie de tiempo con promedios moviles y 
# predicción con modelo Arima
#****************************************************************************************

# Insumos utilizados:

# 1.- dataset combustible.

# Resumen del procedimiento:

# Paso 1: instalación de paqueterías necesarias.
# Paso 2: lectura del archivo.
# Paso 3: recopilación y preparación de los datos.
# Paso 4: Descomposición estacional de una serie de tiempo con promedios moviles.
# Paso 5:  Predicción con el modelo Arima sin ajustar parametros (p,d,q).
# Paso 6: Ajustar manualmente un modelo ARIMA con diferentes parámetros (p, d, q).
# Paso 7: Predicción con el modelo Arima con ajuste de parametros (p,d,q) (Estimacion de Parametros)
# Paso 8: Analisis de los residuos del modelo ajustado para verificar si cumplen con 
# las suposiciones de normalidad y ausencia de autocorrelación 


#******************* Paso 1: instalación de paqueterías necesarias*************************

install.packages(c("forecast"))
install.packages(c("glmnet"))

#****************************** Paso 2: lectura del archivo**********************************
# actualizar ruta
data <- read.csv("C:/Users/dsanchlu/Documents/Diego/Maestria/Intro Modelación y Series Tiempo/S_7/Combustible.csv")


#*********************Paso 3: recopilación y preparación de los datos************************* 
data.ts <- ts(data, start = c(1960,1), frequency = 12)
data.ts
plot(data.ts, main="Demanda de combustible en Ontario (1960-1975)",
     ylab="Demanda", xlab="Año")

#**** Paso 4: Descomposición estacional de una serie de tiempo con promedios moviles*******
data.l <- log(data.ts)
data.dec <- decompose(data.l)
plot(data.dec)

#**********Paso 5:  Predicción con el modelo Arima sin ajustar parametros (p,d,q)****************

data.arima <- auto.arima(data.l)
summary(data.arima)
data.forecast <- forecast(data.arima, h = 36)
plot(data.forecast, col = "blue",
     fcol = "green")

#*****Paso 5 (a): Aplicación de técnica de penalización LASSO y determinación de Lambda*********

# Función para crear retardos (lags)
create_lags <- function(series, lags) {
  lagged_data <- as.data.frame(embed(series, lags + 1))
  colnames(lagged_data) <- paste0("Lag", 0:lags)
  return(lagged_data)
}

lags <- 12
lagged_data <- create_lags(data.l, lags)

# Dividir los datos en entrenamiento y prueba
train_size <- floor(0.7 * nrow(lagged_data))
train_data <- lagged_data[1:train_size, ]
test_data <- lagged_data[(train_size + 1):nrow(lagged_data), ]

x_train <- as.matrix(train_data[, -1])
y_train <- train_data[, 1]
x_test <- as.matrix(test_data[, -1])
y_test <- test_data[, 1]

# Ajustar el modelo LASSO
lasso_model <- glmnet(x_train, y_train, alpha = 1)

# Seleccionar el mejor valor de lambda usando validación cruzada
cv_lasso <- cv.glmnet(x_train, y_train, alpha = 1)
best_lambda <- cv_lasso$lambda.min
print(best_lambda)

# Ajustar el modelo con el mejor valor de lambda
best_lasso_model <- glmnet(x_train, y_train, alpha = 1, lambda = best_lambda)

# Obtener coeficientes seleccionados por LASSO
selected_features <- coef(best_lasso_model)[-1] != 0

# Ver los coeficientes seleccionados
print(selected_features)

# Crear una serie temporal con las características seleccionadas
selected_lags <- x_train[, selected_features]

# Ajustar un modelo ARIMA utilizando las características seleccionadas
arima_model <- auto.arima(y_train, xreg = selected_lags)
summary(arima_model)
# Predecir con el modelo ARIMA
selected_lags_test <- x_test[, selected_features]
data.forecast_aj_LASSO <- forecast(arima_model, xreg = selected_lags_test, h=24)
plot(data.forecast, col = "blue",
     fcol = "green")


##****Paso 6: Ajustar manualmente un modelo ARIMA con diferentes parámetros (p, d, q)******* 

# Definir los rangos de valores para p, d y q

p_values <- c(1, 1, 2)
d_values <- c(2, 1, 3)
q_values <- c(3, 3, 1)

# Dividir los datos en conjunto de entrenamiento y prueba
train_data <- window(data.l, end = c(1960, 1))
test_data <- window(data.l, start = c(1975, 12))

# Inicializar una lista para almacenar los resultados
results <- list()

# Función para calcular RMSE
rmse <- function(actual, predicted) {
  sqrt(mean((actual - predicted)^2))
}

# Ajustar los modelos ARIMA para cada combinación de p, d y q y calcular RMSE
for (p in p_values) {
  for (d in d_values) {
    for (q in q_values) {
      model <- arima(train_data, order = c(p, d, q))
      predictions <- forecast(model, h = 24)$mean
      error <- rmse(test_data, predictions)
      results[[paste(p, d, q, sep = "-")]] <- error
    }
  }
}

# Ver los resultados
print(results)


# elegir mejor modelo encontrado 

best_model <- names(which.min(unlist(results)))
best_model

# Parámetros del mejor modelo manual encontrado

best_params <- as.numeric(unlist(strsplit(best_model, "-")))
best_p <- best_params[1]
best_d <- best_params[2]
best_q <- best_params[3]

#  Resumen del mejor modelo
final_model <- arima(data.l, order = c(best_p, best_d, best_q))
summary(final_model)

#********Paso 7: Predicción con el modelo Arima con ajuste de parametros (p,d,q)********** 
data.forecast_ajustado <- forecast(final_model, h = 24)
plot(data.forecast_ajustado, col = "blue",
     fcol = "green")

plot(data.forecast)
plot(data.forecast_ajustado)
plot(data.forecast_aj_LASSO)

#*****Paso 8: Analisis de los residuos del modelo ajustado para verificar si cumplen******* 
#*************con las suposiciones de normalidad y ausencia de autocorrelación.************** 

# Residuos del modelo
residuals <- residuals(data.arima)

# Gráfico de Residuos
plot(residuals, main="Residuos del Modelo ARIMA")

# Histograma de Residuos
hist(residuals, breaks=20, main="Histograma de Residuos", xlab="Residuos")

# Q-Q Plot
qqnorm(residuals)
qqline(residuals, col = "red")

# Gráfico ACF
acf(residuals, main="ACF de los Residuos")

# Prueba de Ljung-Box
Box.test(residuals, lag = 20, type = "Ljung-Box")

# Prueba de Shapiro-Wilk para normalidad
shapiro.test(residuals)


